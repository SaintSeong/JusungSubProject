#include <cstdlib>

int main() {
    const char* command = "7z a example.7z myfile.txt";

    int result = std::system(command);
    if (result == 0) {
        // 압축이 성공적으로 완료되었을 때 처리할 내용
    } else {
        // 압축 중 오류가 발생했을 때 처리할 내용
    }

    return 0;
}

#include <windows.h>

int main() {
    const char* command = "7z a example.7z myfile.txt";

    STARTUPINFO si = { sizeof(si) };
    PROCESS_INFORMATION pi;

    // Command Prompt 창을 숨기기 위해 실행 옵션에 CREATE_NO_WINDOW 플래그를 설정
    DWORD creationFlags = CREATE_NO_WINDOW;

    if (CreateProcess(NULL, const_cast<LPSTR>(command), NULL, NULL, FALSE, creationFlags, NULL, NULL, &si, &pi)) {
        // 외부 프로그램 실행 성공
        // 프로세스 종료를 기다리는 등 추가 처리 가능

        // 프로세스 핸들 및 스레드 핸들 닫기
        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);
    } else {
        // 외부 프로그램 실행 실패
        // 오류 처리
    }

    return 0;
}

#include <windows.h>
#include <iostream>

int main() {
    const char* command = "7z a example.7z myfile.txt";

    STARTUPINFO si = { sizeof(si) };
    PROCESS_INFORMATION pi;

    // Command Prompt 창을 숨기기 위해 실행 옵션에 CREATE_NO_WINDOW 플래그를 설정
    DWORD creationFlags = CREATE_NO_WINDOW;

    // 표준 출력을 읽기 위한 파이프 생성
    HANDLE hChildStdoutRead;
    HANDLE hChildStdoutWrite;
    SECURITY_ATTRIBUTES sa;
    sa.nLength = sizeof(SECURITY_ATTRIBUTES);
    sa.bInheritHandle = TRUE;
    sa.lpSecurityDescriptor = NULL;
    if (!CreatePipe(&hChildStdoutRead, &hChildStdoutWrite, &sa, 0)) {
        // 파이프 생성 실패
        // 오류 처리
        return 1;
    }

    // 프로세스 시작
    si.dwFlags |= STARTF_USESTDHANDLES;
    si.hStdOutput = hChildStdoutWrite;
    if (CreateProcess(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, creationFlags, NULL, NULL, &si, &pi)) {
        // 외부 프로그램 실행 성공
        // 외부 프로그램이 출력하는 정보를 읽어 처리

        // 프로세스 종료를 기다림
        WaitForSingleObject(pi.hProcess, INFINITE);

        // 표준 출력 파이프를 닫음
        CloseHandle(hChildStdoutWrite);

        // 외부 프로그램이 출력한 정보를 읽음
        DWORD bytesRead;
        CHAR buffer[4096];
        while (ReadFile(hChildStdoutRead, buffer, sizeof(buffer), &bytesRead, NULL) && bytesRead > 0) {
            // 외부 프로그램이 출력한 정보를 처리
            std::cout.write(buffer, bytesRead);
        }

        // 프로세스 핸들 및 스레드 핸들 닫기
        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);
    } else {
        // 외부 프로그램 실행 실패
        // 오류 처리
        return 1;
    }

    return 0;
}

#include <windows.h>
#include <iostream>

void CALLBACK ReadCompletionRoutine(DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped) {
    if (dwErrorCode == ERROR_SUCCESS && dwNumberOfBytesTransfered > 0) {
        CHAR buffer[4096];
        std::cout.write(buffer, dwNumberOfBytesTransfered);
    }
}

int main() {
    const char* command = "7z a example.7z myfile.txt";

    STARTUPINFO si = { sizeof(si) };
    PROCESS_INFORMATION pi;

    // Command Prompt 창을 숨기기 위해 실행 옵션에 CREATE_NO_WINDOW 플래그를 설정
    DWORD creationFlags = CREATE_NO_WINDOW;

    // 표준 출력을 비동기적으로 읽기 위한 파이프 생성
    HANDLE hChildStdoutRead;
    HANDLE hChildStdoutWrite;
    SECURITY_ATTRIBUTES sa;
    sa.nLength = sizeof(SECURITY_ATTRIBUTES);
    sa.bInheritHandle = TRUE;
    sa.lpSecurityDescriptor = NULL;
    if (!CreatePipe(&hChildStdoutRead, &hChildStdoutWrite, &sa, 0)) {
        // 파이프 생성 실패
        // 오류 처리
        return 1;
    }

    // 프로세스 시작
    si.dwFlags |= STARTF_USESTDHANDLES;
    si.hStdOutput = hChildStdoutWrite;
    if (CreateProcess(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, creationFlags, NULL, NULL, &si, &pi)) {
        // 외부 프로그램 실행 성공
        // 외부 프로그램이 출력하는 정보를 실시간으로 읽어 처리

        // 비동기적으로 표준 출력 파이프를 읽기
        OVERLAPPED overlapped = { 0 };
        DWORD bytesRead;
        CHAR buffer[4096];
        overlapped.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
        if (overlapped.hEvent) {
            while (ReadFileEx(hChildStdoutRead, buffer, sizeof(buffer), &overlapped, ReadCompletionRoutine)) {
                if (WaitForSingleObject(overlapped.hEvent, INFINITE) == WAIT_FAILED) {
                    // 오류 처리
                    break;
                }
                ResetEvent(overlapped.hEvent);
            }

            // 표준 출력 파이프를 닫음
            CloseHandle(hChildStdoutWrite);
            CloseHandle(hChildStdoutRead);

            // 프로세스 핸들 및 스레드 핸들 닫기
            CloseHandle(pi.hProcess);
            CloseHandle(pi.hThread);

            // 이벤트 핸들 닫기
            CloseHandle(overlapped.hEvent);
        } else {
            // 이벤트 생성 실패
            // 오류 처리
        }
    } else {
        // 외부 프로그램 실행 실패
        // 오류 처리
    }

    return 0;
}
